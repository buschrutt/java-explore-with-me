{
  "info": {
    "_postman_id": "6c381cbf-5946-4732-a95f-b907dc260470",
    "name": "Explore-with-me: Comments feature",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "24628449"
  },
  "item": [
    {
      "name": "Post&Patch tests",
      "item": [
        {
          "name": "Add Comment id1",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let eventBody = rnd.getEvent(category.id);\r",
                  "        eventBody['requestModeration'] = false\r",
                  "        let event = await api.addEvent(user.id, eventBody);\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const submittedUser = await api.addUser(rnd.getUser());\r",
                  "        pm.request.removeQueryParams(['eventId']);\r",
                  "        pm.request.addQueryParams([`eventId=` + event.id]);\r",
                  "        pm.collectionVariables.set('uid', submittedUser.id);\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Test data building error.\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response has to have code 200 and json data\", function () {\r",
                  "    pm.response.to.have.status(200);  \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Comment has to have fields: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('eventId');\r",
                  "pm.expect(target).to.have.property('commentatorId');\r",
                  "pm.expect(target).to.have.property('text');\r",
                  "pm.expect(target).to.have.property('created');\r",
                  "pm.expect(target).to.have.property('status');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The response data has bo match the request\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect(target.eventId).equal(source.eventId, 'eventId fiald isnt the same');\r",
                  "    pm.expect(target.commentatorId).equal(source.commentatorId, 'commentatorId fiald isnt the same');\r",
                  "    pm.expect(target.text).equal(source.text, 'text fiald isnt the same');\r",
                  "    pm.expect(target.status).equal('PENDING', 'Must be PENDING');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"eventId\": 1,\r\n    \"commentatorId\": 1,\r\n    \"text\": \"Who kniows what about the event? Comment id1\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Add Comment id2",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let eventBody = rnd.getEvent(category.id);\r",
                  "        eventBody['requestModeration'] = false\r",
                  "        let event = await api.addEvent(user.id, eventBody);\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const submittedUser = await api.addUser(rnd.getUser());\r",
                  "        pm.request.removeQueryParams(['eventId']);\r",
                  "        pm.request.addQueryParams([`eventId=` + event.id]);\r",
                  "        pm.collectionVariables.set('uid', submittedUser.id);\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Test data building error.\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response has to have code 200 and json data\", function () {\r",
                  "    pm.response.to.have.status(200);  \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Comment has to have fields: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('eventId');\r",
                  "pm.expect(target).to.have.property('commentatorId');\r",
                  "pm.expect(target).to.have.property('text');\r",
                  "pm.expect(target).to.have.property('created');\r",
                  "pm.expect(target).to.have.property('status');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The response data has bo match the request\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect(target.eventId).equal(source.eventId, 'eventId fiald isnt the same');\r",
                  "    pm.expect(target.commentatorId).equal(source.commentatorId, 'commentatorId fiald isnt the same');\r",
                  "    pm.expect(target.text).equal(source.text, 'text fiald isnt the same');\r",
                  "    pm.expect(target.status).equal('PENDING', 'Must be PENDING');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"eventId\": 1,\r\n    \"commentatorId\": 2,\r\n    \"text\": \"Nothing to see there? Comment id2\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Add Comment id3",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response has to have code 200 and json data\", function () {\r",
                  "    pm.response.to.have.status(200);  \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Comment has to have fields: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('eventId');\r",
                  "pm.expect(target).to.have.property('commentatorId');\r",
                  "pm.expect(target).to.have.property('text');\r",
                  "pm.expect(target).to.have.property('created');\r",
                  "pm.expect(target).to.have.property('status');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The response data has bo match the request\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect(target.eventId).equal(source.eventId, 'eventId fiald isnt the same');\r",
                  "    pm.expect(target.commentatorId).equal(source.commentatorId, 'commentatorId fiald isnt the same');\r",
                  "    pm.expect(target.text).equal(source.text, 'text fiald isnt the same');\r",
                  "    pm.expect(target.status).equal('PENDING', 'Must be PENDING');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"eventId\": 1,\r\n    \"commentatorId\": 1,\r\n    \"text\": \"My 2nd post here. Comment id3\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Exception 400 test Add Comment No Text",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Responce must be 400 BAD_REQUES\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"eventId\": 1,\r\n    \"commentatorId\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Exception 400 test Add Comment No Commentator",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Responce must be 400 BAD_REQUES\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"eventId\": 1,\r\n    \"text\": \"Nothing to see there? Comment id2\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Exception 400 test Add Comment No Event Id",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Responce must be 400 BAD_REQUES\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"commentatorId\": 1,\r\n    \"text\": \"Nothing to see there? Comment id2\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Publish Comment id1",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response has to have code 200 and json data\", function () {\r",
                  "    pm.response.to.have.status(200);  \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Comment has to have fields: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('eventId');\r",
                  "pm.expect(target).to.have.property('commentatorId');\r",
                  "pm.expect(target).to.have.property('text');\r",
                  "pm.expect(target).to.have.property('created');\r",
                  "pm.expect(target).to.have.property('status');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The response data has bo match the request\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect(target.eventId).equal(1, 'eventId fiald isnt the 1');\r",
                  "    pm.expect(target.commentatorId).equal(1, 'commentatorId fiald isnt 1');\r",
                  "    pm.expect(target.status).equal('PUBLISHED', 'Must be PUBLISHED');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"id\": 1,\r\n    \"status\": \"PUBLISHED\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/comments/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "comments",
                "1"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Publish Comment id2",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response has to have code 200 and json data\", function () {\r",
                  "    pm.response.to.have.status(200);  \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Comment has to have fields: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('eventId');\r",
                  "pm.expect(target).to.have.property('commentatorId');\r",
                  "pm.expect(target).to.have.property('text');\r",
                  "pm.expect(target).to.have.property('created');\r",
                  "pm.expect(target).to.have.property('status');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The response data has bo match the request\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect(target.eventId).equal(1, 'eventId fiald isnt the 1');\r",
                  "    pm.expect(target.commentatorId).equal(2, 'commentatorId fiald isnt 1');\r",
                  "    pm.expect(target.status).equal('PUBLISHED', 'Must be PUBLISHED');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"id\": 2,\r\n    \"status\": \"PUBLISHED\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/comments/2",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "comments",
                "2"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Cancel Comment id3",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response has to have code 200 and json data\", function () {\r",
                  "    pm.response.to.have.status(200);  \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Comment has to have fields: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('eventId');\r",
                  "pm.expect(target).to.have.property('commentatorId');\r",
                  "pm.expect(target).to.have.property('text');\r",
                  "pm.expect(target).to.have.property('created');\r",
                  "pm.expect(target).to.have.property('status');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The response data has bo match the request\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect(target.eventId).equal(1, 'eventId fiald isnt the 1');\r",
                  "    pm.expect(target.commentatorId).equal(1, 'commentatorId fiald isnt 2');\r",
                  "    pm.expect(target.status).equal('CANCELED', 'Must be CANCELED');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"id\": 1,\r\n    \"status\": \"CANCELED\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/comments/3",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "comments",
                "3"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Change text Comment id2",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response has to have code 200 and json data\", function () {\r",
                  "    pm.response.to.have.status(200);  \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Comment has to have fields: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('eventId');\r",
                  "pm.expect(target).to.have.property('commentatorId');\r",
                  "pm.expect(target).to.have.property('text');\r",
                  "pm.expect(target).to.have.property('created');\r",
                  "pm.expect(target).to.have.property('status');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"The response data has bo match the request\", function () {\r",
                  "    pm.expect(target.id).equal(2, 'eventId field isnt the 2');\r",
                  "    pm.expect(target.eventId).equal(1, 'eventId field isnt the 1');\r",
                  "    pm.expect(target.commentatorId).equal(2, 'commentatorId field isnt 2');\r",
                  "    pm.expect(target.text).equal('Got a pitch. Changed the mind. Comment id2', 'text field not what expected');\r",
                  "    pm.expect(target.status).equal('PUBLISHED', 'Must be PUBLISHED');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "X-Sharer-User-Id",
                "value": "2",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"id\": 2,\r\n    \"text\": \"Got a pitch. Changed the mind. Comment id2\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/comments/2",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "2"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Exception 400 test Publish Comment No Status",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Responce must be 400 Bad Request\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"id\": 2\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/comments/2",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "comments",
                "2"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Exception 400 test Change Comment No id",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Responce must be 400 Bad Request\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "X-Sharer-User-Id",
                "value": "2",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"text\": \"Got a pitch. Changed the mind. Comment id2\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/comments/2",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "2"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Exception 400 test Change Comment No text",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Responce must be 400 Bad Request\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "X-Sharer-User-Id",
                "value": "2",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"id\": 2\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/comments/2",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "2"
              ]
            }
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Get tests",
      "item": [
        {
          "name": "Find Comment id2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Has item create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test item 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test item 'event' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('event');\r",
                  "});\r",
                  "pm.test(\"Test item 'commentator' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('commentator');\r",
                  "});\r",
                  "pm.test(\"Test item 'text' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('text');\r",
                  "    pm.expect(jsonData.text, '\"description\" must be \"Got a pitch. Changed the mind. Comment id2\"').to.eql('Got a pitch. Changed the mind. Comment id2');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/comments/2",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "comments",
                "2"
              ],
              "query": [
                {
                  "key": "",
                  "value": "",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Find Event id1 Comments No Params",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Has Comments response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test Comment 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test Comment 'event' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('event');\r",
                  "});\r",
                  "pm.test(\"Test Comment 'commentator' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('commentator');\r",
                  "});\r",
                  "pm.test(\"Test Comment 'text' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('text');\r",
                  "    pm.expect(jsonData[1].text, '\"description\" must be \"Who kniows what about the event? Comment id1\"').to.eql('Who kniows what about the event? Comment id1');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test Comment 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test Comment 'event' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('event');\r",
                  "});\r",
                  "pm.test(\"Test Comment 'commentator' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('commentator');\r",
                  "});\r",
                  "pm.test(\"Test Comment 'text' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('text');\r",
                  "    pm.expect(jsonData[0].text, '\"description\" must be \"Got a pitch. Changed the mind. Comment id2\"').to.eql('Got a pitch. Changed the mind. Comment id2');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/comments/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "1"
              ],
              "query": [
                {
                  "key": "",
                  "value": "",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Find Event id1 Comments With Params",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Has Comments response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 2').to.eql(1);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test Comment 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test Comment 'event' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('event');\r",
                  "});\r",
                  "pm.test(\"Test Comment 'commentator' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('commentator');\r",
                  "});\r",
                  "pm.test(\"Test Comment 'text' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('text');\r",
                  "    pm.expect(jsonData[0].text, '\"description\" must be \"Got a pitch. Changed the mind. Comment id2\"').to.eql('Got a pitch. Changed the mind. Comment id2');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/comments/1?size=1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "1"
              ],
              "query": [
                {
                  "key": "from",
                  "value": "0",
                  "disabled": true
                },
                {
                  "key": "size",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Exception 404 Find Comment id doesnt exist",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Responce must be 404 NOT FOUND\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/comments/99",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "comments",
                "99"
              ],
              "query": [
                {
                  "key": "",
                  "value": "",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Exception 404 test: Find Event id doesnt exist",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Responce must be 404 NOT FOUND\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/comments/99",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "99"
              ],
              "query": [
                {
                  "key": "",
                  "value": "",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Delete tests",
      "item": [
        {
          "name": "Delete Comment id2 by Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
                  "    pm.response.to.have.status(204);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/comments/2",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "comments",
                "2"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Find Deleted Comment id2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "\r",
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "    pm.response.to.be.notFound;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/comments/2",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "comments",
                "2"
              ],
              "query": [
                {
                  "key": "",
                  "value": "",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Comment id1 by User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
                  "    pm.response.to.have.status(204);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "X-Sharer-User-Id",
                "value": "1",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/comments/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "1"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Find Deleted Comment id1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "\r",
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "    pm.response.to.be.notFound;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/comments/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "comments",
                "1"
              ],
              "query": [
                {
                  "key": "",
                  "value": "",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "API = class {",
          "    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
          "        this.baseUrl = baseUrl;",
          "        this.pm = postman;",
          "        this._verbose = verbose;",
          "    }",
          "",
          "    async addUser(user, verbose=null) {",
          "        return this.post(\"/admin/users\", user, \"New User adding error: \", verbose);",
          "    }",
          "",
          "    async addCategory(category, verbose=null) {",
          "        return this.post(\"/admin/categories\", category, \"New Category adding error: \", verbose);",
          "    }",
          "",
          "    async addEvent(userId, event, verbose=null) {",
          "        return this.post(\"/users/\" + userId + \"/events\", event, \"New Event adding error: \", verbose);",
          "    }",
          "",
          "    async addCompilation(compilation, verbose=null) {",
          "        return this.post(\"/admin/compilations\", compilation, \"New Compilation adding error: \", verbose);",
          "    }",
          "",
          "    async publishParticipationRequest(eventId, userId, verbose=null) {",
          "        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"New Request adding error: \", verbose);",
          "    }",
          "",
          "    async publishEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Event publication error: \", verbose);",
          "    }",
          "    ",
          "    async rejectEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Event rejection error\", verbose);",
          "    }",
          "",
          "    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
          "        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Event Request Participation accept error\", verbose);",
          "    }",
          "",
          "    async post(path, body, errorText = \"POST-request execution error: \", verbose=null) {",
          "        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async patch(path, body = null, errorText = \"PATCH-request execution error: \", verbose=null) {",
          "        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async get(path, body = null, errorText = \"GET-request execution error: \", verbose=null) {",
          "        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async sendRequest(method, path, body=null, errorText = \"Request execution error: \", verbose=null) {",
          "        return new Promise((resolve, reject) => {",
          "            verbose = verbose == null ? this._verbose : verbose;",
          "",
          "            const request = {",
          "                url: this.baseUrl + path,",
          "                method: method,",
          "                body: body == null ? \"\" : JSON.stringify(body),",
          "                header: { \"Content-Type\": \"application/json\" },",
          "            };",
          "",
          "            if(verbose) {",
          "                console.log(\"Request sending: \", request);",
          "            }",
          "",
          "            try {",
          "                this.pm.sendRequest(request, (error, response) => {",
          "                    if(error || (response.code >= 400 && response.code <= 599)) {",
          "                        let err = error ? error : JSON.stringify(response.json());",
          "                        console.error(\"While request execution an error occurred.\\n\", err,",
          "                             \"\\nTry the request locally.\\n\", JSON.stringify(request));",
          "",
          "                        reject(new Error(errorText + err));",
          "                    }",
          "",
          "                    if(verbose) {",
          "                        console.log(\"Request execution result: code - \", response.code, \", body: \", response.json());",
          "                    }",
          "",
          "                    resolve(response.json());",
          "                });",
          "            } catch(err) {",
          "                if(verbose) {",
          "                    console.error(errorText, err);",
          "                }",
          "                return Promise.reject(err);",
          "            }",
          "        });",
          "    }",
          "};",
          "",
          "RandomUtils = class {",
          "    constructor() {}",
          "",
          "    getUser() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomFullName}}'),",
          "            email: pm.variables.replaceIn('{{$randomEmail}}')",
          "        };",
          "    }",
          "",
          "    getCategory() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
          "        };",
          "    }",
          "",
          "    getEvent(categoryId) {",
          "        return {",
          "            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
          "            category: categoryId,",
          "            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
          "            eventDate: this.getFutureDateTime(),",
          "            location: {",
          "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
          "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
          "            },",
          "            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
          "            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
          "        }",
          "    }",
          "",
          "    getCompilation(...eventIds) {",
          "        return {",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
          "            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            events: eventIds",
          "        };",
          "    }",
          "",
          "    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
          "        let moment = require('moment');",
          "",
          "        let m = moment();",
          "        m.add(hourShift, 'hour');",
          "        m.add(minuteShift, 'minute');",
          "        m.add(yearShift, 'year');",
          "",
          "        return m.format('YYYY-MM-DD HH:mm:ss');",
          "    }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "uid",
      "value": ""
    }
  ]
}